VkPipelineStageFlags(3)
=======================

Name
----
VkPipelineStageFlags - Pipeline stage identifiers.

C Specification
---------------

include::../enums/VkPipelineStageFlagBits.txt[]

Constants
---------

ename:VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT::
    Stage of the pipeline where commands are initially received by the queue.

ename:VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT::
    Stage of the pipeline where Draw/DispatchIndirect data structures are
    consumed.

ename:VK_PIPELINE_STAGE_VERTEX_INPUT_BIT::
    Stage of the pipeline where vertex and index buffers are consumed.

ename:VK_PIPELINE_STAGE_VERTEX_SHADER_BIT::
    Vertex shader stage.

ename:VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT::
    Tessellation control shader stage.

ename:VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT::
    Tessellation evaluation shader stage.

ename:VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT::
    Geometry shader stage.

ename:VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT::
    Fragment shader stage.

ename:VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT::
    Stage of the pipeline where early fragment tests (depth/stencil test before
    fragment shading) are performed.

ename:VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT::
    Stage of the pipeline where late fragment tests (depth/stencil test after
    fragment shading) are performed.

ename:VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT::
    Stage of the pipeline after blending where the final color values are output
    from the pipeline. Note that this does not necessarily indicate that the
    values have been committed to memory.

ename:VK_PIPELINE_STAGE_TRANSFER_BIT::
    Execution of copy commands. This includes the operations resulting from all
    transfer commands, e.g. fname:vkCmdCopyImage, fname:vkCmdCopyBuffer,
    fname:vkCmdBlitImage, fname:vkCmdResolveImage, fname:vkCmdClearColorImage,
    etc.

ename:VK_PIPELINE_STAGE_HOST_BIT::
    Indicates execution on the Host of reads/writes of device memory.

Description
-----------

The pipeline stages are used to describe which operations must be synchronized
for the purposes of execution dependencies in pipeline barriers, event
signal/wait, and subpass dependencies. Many of the bits describe stages of the
graphics pipeline, but there are also pseudo-stages for compute work,
copy commands, and CPU production/consumption of data.

For the commands flink:vkCmdSetEvent and flink:vkCmdResetEvent the event object is
set and reset, respectively, after the specified pipeline stages have completed
executing prior commands. Some implementations may not be able to signal at as
fine a grain as the bits in the bitfield, in which case the signaling may occur
after additional stages have completed executing prior commands.

For the command flink:vkCmdWaitEvents, the ptext:srcStageMask should be a
bitwise OR of all ptext:stageMasks used to signal the events, as described
above. If some events were signaled with flink:vkSetEvent, then this should
include ename:VK_PIPELINE_STAGE_HOST_BIT. ptext:dstStageMask indicates the set of
pipeline stages that should not begin executing subsequent commands until the
events are signaled. Some implementations may not be able to wait at as fine
a grain as the bits in the bitfield, in which case the waiting may occur at an
earlier stage in the pipeline.

For the command flink:vkCmdPipelineBarrier, writes as described by
ptext:outputMask that were written by pipeline stages in ptext:srcStageMask
prior to the barrier are made visible to reads as described by ptext:inputMask
in pipeline stages in ptext:dstStageMask subsequent to the barrier.

ename:VK_PIPELINE_STAGE_HOST_BIT cannot be used for fname:vkCmdSetEvent,
fname:vkCmdResetEvent, or fname:vkCmdPipelineBarrier.

See Also
--------

flink:vkCmdSetEvent, flink:vkCmdResetEvent, flink:vkCmdWaitEvents, flink:vkCmdPipelineBarrier

include::footer.txt[]

[[platformCreateSurface_wayland,platformCreateSurface_wayland]]

=== Wayland Platform

To create a sname:VkSurfaceKHR object for a Wayland surface, call:

include::../../protos/vkCreateWaylandSurfaceKHR.txt[]

  * pname:instance is the instance to associate the surface with.
  * pname:pCreateInfo is a pointer to an instance of the
    sname:VkWaylandSurfaceCreateInfoKHR structure containing parameters
    affecting the creation of the surface object.
  * pname:pAllocator is the allocator used for host memory allocated for the
    surface object when there is no more specific allocator available (see
    <<memory-allocation,Memory Allocation>>).
  * pname:pSurface points to a sname:VkSurfaceKHR handle in which the
    created surface object is returned.

include::../../validity/protos/vkCreateWaylandSurfaceKHR.txt[]

The definition of sname:VkWaylandSurfaceCreateInfoKHR is:

include::../../structs/VkWaylandSurfaceCreateInfoKHR.txt[]

The members of sname:VkWaylandSurfaceCreateInfoKHR have the following
meanings:

  * pname:sType is the type of this structure and must: be
    ename:VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR.
  * pname:pNext is `NULL` or a pointer to an extension-specific structure.
  * pname:flags is reserved for future use.
  * pname:display and pname:surface are pointers to the Wayland wl_display and
    wl_surface to associate the surface with.

include::../../validity/structs/VkWaylandSurfaceCreateInfoKHR.txt[]

On Wayland, pname:currentExtent is undefined latexmath:[$(0, 0)$].  Whatever
the application sets a swapchain's pname:imageExtent to will be the size of
the window, after the first image is presented.  pname:minImageExtent is
latexmath:[$(1, 1)$], and pname:maxImageExtent is the maximum supported
surface size.

Some {apiname} functions may send protocol over the specified
code:wl_device connection when using a swapchain or presentable images
created from a slink:VkSurfaceKHR referring to a code:wl_surface.
Applications must therefore ensure that both the code:wl_device and the
code:wl_surface remain valid for the lifetime of any slink:VkSwapchainKHR
objects created from a particular code:wl_device and code:wl_surface.
Also, calling flink:vkQueuePresentKHR will result in {apiname} sending
code:wl_surface.commit requests to the underlying code:wl_surface of each
slink:VkSwapchainKHR objects referenced by pname:pPresentInfo.  Therefore,
if the application wishes to synchronize any window changes with a
particular frame, such requests must be sent to the Wayland display server
prior to calling flink:vkQueuePresentKHR.
